// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CliServiceClient is the client API for CliService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CliServiceClient interface {
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitReply, error)
	GetServiceUploadUrl(ctx context.Context, in *GetServiceUploadUrlRequest, opts ...grpc.CallOption) (*GetServiceUploadUrlResponse, error)
	DeployUrl(ctx context.Context, in *DeployUrlRequest, opts ...grpc.CallOption) (CliService_DeployUrlClient, error)
}

type cliServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCliServiceClient(cc grpc.ClientConnInterface) CliServiceClient {
	return &cliServiceClient{cc}
}

func (c *cliServiceClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitReply, error) {
	out := new(InitReply)
	err := c.cc.Invoke(ctx, "/CliService/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliServiceClient) GetServiceUploadUrl(ctx context.Context, in *GetServiceUploadUrlRequest, opts ...grpc.CallOption) (*GetServiceUploadUrlResponse, error) {
	out := new(GetServiceUploadUrlResponse)
	err := c.cc.Invoke(ctx, "/CliService/GetServiceUploadUrl", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliServiceClient) DeployUrl(ctx context.Context, in *DeployUrlRequest, opts ...grpc.CallOption) (CliService_DeployUrlClient, error) {
	stream, err := c.cc.NewStream(ctx, &CliService_ServiceDesc.Streams[0], "/CliService/DeployUrl", opts...)
	if err != nil {
		return nil, err
	}
	x := &cliServiceDeployUrlClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CliService_DeployUrlClient interface {
	Recv() (*DeployUrlReply, error)
	grpc.ClientStream
}

type cliServiceDeployUrlClient struct {
	grpc.ClientStream
}

func (x *cliServiceDeployUrlClient) Recv() (*DeployUrlReply, error) {
	m := new(DeployUrlReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CliServiceServer is the server API for CliService service.
// All implementations must embed UnimplementedCliServiceServer
// for forward compatibility
type CliServiceServer interface {
	Init(context.Context, *InitRequest) (*InitReply, error)
	GetServiceUploadUrl(context.Context, *GetServiceUploadUrlRequest) (*GetServiceUploadUrlResponse, error)
	DeployUrl(*DeployUrlRequest, CliService_DeployUrlServer) error
	mustEmbedUnimplementedCliServiceServer()
}

// UnimplementedCliServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCliServiceServer struct {
}

func (UnimplementedCliServiceServer) Init(context.Context, *InitRequest) (*InitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedCliServiceServer) GetServiceUploadUrl(context.Context, *GetServiceUploadUrlRequest) (*GetServiceUploadUrlResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetServiceUploadUrl not implemented")
}
func (UnimplementedCliServiceServer) DeployUrl(*DeployUrlRequest, CliService_DeployUrlServer) error {
	return status.Errorf(codes.Unimplemented, "method DeployUrl not implemented")
}
func (UnimplementedCliServiceServer) mustEmbedUnimplementedCliServiceServer() {}

// UnsafeCliServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CliServiceServer will
// result in compilation errors.
type UnsafeCliServiceServer interface {
	mustEmbedUnimplementedCliServiceServer()
}

func RegisterCliServiceServer(s grpc.ServiceRegistrar, srv CliServiceServer) {
	s.RegisterService(&CliService_ServiceDesc, srv)
}

func _CliService_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServiceServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CliService/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServiceServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliService_GetServiceUploadUrl_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetServiceUploadUrlRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServiceServer).GetServiceUploadUrl(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CliService/GetServiceUploadUrl",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServiceServer).GetServiceUploadUrl(ctx, req.(*GetServiceUploadUrlRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliService_DeployUrl_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeployUrlRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CliServiceServer).DeployUrl(m, &cliServiceDeployUrlServer{stream})
}

type CliService_DeployUrlServer interface {
	Send(*DeployUrlReply) error
	grpc.ServerStream
}

type cliServiceDeployUrlServer struct {
	grpc.ServerStream
}

func (x *cliServiceDeployUrlServer) Send(m *DeployUrlReply) error {
	return x.ServerStream.SendMsg(m)
}

// CliService_ServiceDesc is the grpc.ServiceDesc for CliService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CliService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CliService",
	HandlerType: (*CliServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _CliService_Init_Handler,
		},
		{
			MethodName: "GetServiceUploadUrl",
			Handler:    _CliService_GetServiceUploadUrl_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DeployUrl",
			Handler:       _CliService_DeployUrl_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "cli.proto",
}
