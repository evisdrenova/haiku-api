// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CliServiceClient is the client API for CliService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CliServiceClient interface {
	Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitReply, error)
	Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployReply, error)
	ListEnv(ctx context.Context, in *ListEnvRequest, opts ...grpc.CallOption) (*ListEnvReply, error)
	SetEnv(ctx context.Context, in *SetEnvRequest, opts ...grpc.CallOption) (*SetEnvReply, error)
	RemoveEnv(ctx context.Context, in *RemoveEnvRequest, opts ...grpc.CallOption) (*RemoveEnvReply, error)
	DockerLogin(ctx context.Context, in *DockerLoginRequest, opts ...grpc.CallOption) (*DockerLoginReply, error)
	Up(ctx context.Context, opts ...grpc.CallOption) (CliService_UpClient, error)
}

type cliServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCliServiceClient(cc grpc.ClientConnInterface) CliServiceClient {
	return &cliServiceClient{cc}
}

func (c *cliServiceClient) Init(ctx context.Context, in *InitRequest, opts ...grpc.CallOption) (*InitReply, error) {
	out := new(InitReply)
	err := c.cc.Invoke(ctx, "/CliService/Init", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliServiceClient) Deploy(ctx context.Context, in *DeployRequest, opts ...grpc.CallOption) (*DeployReply, error) {
	out := new(DeployReply)
	err := c.cc.Invoke(ctx, "/CliService/Deploy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliServiceClient) ListEnv(ctx context.Context, in *ListEnvRequest, opts ...grpc.CallOption) (*ListEnvReply, error) {
	out := new(ListEnvReply)
	err := c.cc.Invoke(ctx, "/CliService/ListEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliServiceClient) SetEnv(ctx context.Context, in *SetEnvRequest, opts ...grpc.CallOption) (*SetEnvReply, error) {
	out := new(SetEnvReply)
	err := c.cc.Invoke(ctx, "/CliService/SetEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliServiceClient) RemoveEnv(ctx context.Context, in *RemoveEnvRequest, opts ...grpc.CallOption) (*RemoveEnvReply, error) {
	out := new(RemoveEnvReply)
	err := c.cc.Invoke(ctx, "/CliService/RemoveEnv", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliServiceClient) DockerLogin(ctx context.Context, in *DockerLoginRequest, opts ...grpc.CallOption) (*DockerLoginReply, error) {
	out := new(DockerLoginReply)
	err := c.cc.Invoke(ctx, "/CliService/DockerLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cliServiceClient) Up(ctx context.Context, opts ...grpc.CallOption) (CliService_UpClient, error) {
	stream, err := c.cc.NewStream(ctx, &CliService_ServiceDesc.Streams[0], "/CliService/Up", opts...)
	if err != nil {
		return nil, err
	}
	x := &cliServiceUpClient{stream}
	return x, nil
}

type CliService_UpClient interface {
	Send(*UpRequest) error
	Recv() (*UpResponse, error)
	grpc.ClientStream
}

type cliServiceUpClient struct {
	grpc.ClientStream
}

func (x *cliServiceUpClient) Send(m *UpRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cliServiceUpClient) Recv() (*UpResponse, error) {
	m := new(UpResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CliServiceServer is the server API for CliService service.
// All implementations must embed UnimplementedCliServiceServer
// for forward compatibility
type CliServiceServer interface {
	Init(context.Context, *InitRequest) (*InitReply, error)
	Deploy(context.Context, *DeployRequest) (*DeployReply, error)
	ListEnv(context.Context, *ListEnvRequest) (*ListEnvReply, error)
	SetEnv(context.Context, *SetEnvRequest) (*SetEnvReply, error)
	RemoveEnv(context.Context, *RemoveEnvRequest) (*RemoveEnvReply, error)
	DockerLogin(context.Context, *DockerLoginRequest) (*DockerLoginReply, error)
	Up(CliService_UpServer) error
	mustEmbedUnimplementedCliServiceServer()
}

// UnimplementedCliServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCliServiceServer struct {
}

func (UnimplementedCliServiceServer) Init(context.Context, *InitRequest) (*InitReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Init not implemented")
}
func (UnimplementedCliServiceServer) Deploy(context.Context, *DeployRequest) (*DeployReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Deploy not implemented")
}
func (UnimplementedCliServiceServer) ListEnv(context.Context, *ListEnvRequest) (*ListEnvReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListEnv not implemented")
}
func (UnimplementedCliServiceServer) SetEnv(context.Context, *SetEnvRequest) (*SetEnvReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetEnv not implemented")
}
func (UnimplementedCliServiceServer) RemoveEnv(context.Context, *RemoveEnvRequest) (*RemoveEnvReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveEnv not implemented")
}
func (UnimplementedCliServiceServer) DockerLogin(context.Context, *DockerLoginRequest) (*DockerLoginReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DockerLogin not implemented")
}
func (UnimplementedCliServiceServer) Up(CliService_UpServer) error {
	return status.Errorf(codes.Unimplemented, "method Up not implemented")
}
func (UnimplementedCliServiceServer) mustEmbedUnimplementedCliServiceServer() {}

// UnsafeCliServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CliServiceServer will
// result in compilation errors.
type UnsafeCliServiceServer interface {
	mustEmbedUnimplementedCliServiceServer()
}

func RegisterCliServiceServer(s grpc.ServiceRegistrar, srv CliServiceServer) {
	s.RegisterService(&CliService_ServiceDesc, srv)
}

func _CliService_Init_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServiceServer).Init(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CliService/Init",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServiceServer).Init(ctx, req.(*InitRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliService_Deploy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeployRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServiceServer).Deploy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CliService/Deploy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServiceServer).Deploy(ctx, req.(*DeployRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliService_ListEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServiceServer).ListEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CliService/ListEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServiceServer).ListEnv(ctx, req.(*ListEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliService_SetEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServiceServer).SetEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CliService/SetEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServiceServer).SetEnv(ctx, req.(*SetEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliService_RemoveEnv_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveEnvRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServiceServer).RemoveEnv(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CliService/RemoveEnv",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServiceServer).RemoveEnv(ctx, req.(*RemoveEnvRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliService_DockerLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DockerLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CliServiceServer).DockerLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/CliService/DockerLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CliServiceServer).DockerLogin(ctx, req.(*DockerLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CliService_Up_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CliServiceServer).Up(&cliServiceUpServer{stream})
}

type CliService_UpServer interface {
	Send(*UpResponse) error
	Recv() (*UpRequest, error)
	grpc.ServerStream
}

type cliServiceUpServer struct {
	grpc.ServerStream
}

func (x *cliServiceUpServer) Send(m *UpResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cliServiceUpServer) Recv() (*UpRequest, error) {
	m := new(UpRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CliService_ServiceDesc is the grpc.ServiceDesc for CliService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CliService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CliService",
	HandlerType: (*CliServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Init",
			Handler:    _CliService_Init_Handler,
		},
		{
			MethodName: "Deploy",
			Handler:    _CliService_Deploy_Handler,
		},
		{
			MethodName: "ListEnv",
			Handler:    _CliService_ListEnv_Handler,
		},
		{
			MethodName: "SetEnv",
			Handler:    _CliService_SetEnv_Handler,
		},
		{
			MethodName: "RemoveEnv",
			Handler:    _CliService_RemoveEnv_Handler,
		},
		{
			MethodName: "DockerLogin",
			Handler:    _CliService_DockerLogin_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Up",
			Handler:       _CliService_Up_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cli.proto",
}
